#!/bin/bash
#SBATCH -n 24
#SBATCH -o mima_compile_9.out
#SBATCH -e mima_compile_9.err
#
#Minimal runscript for atmospheric dynamical cores
# Compile script for MiMA... or a template for it at least. For more information, see docs, etc. on GitHub:
# parent repo:
# https://github.com/mjucker/MiMA
#
# NOTE: this script has an openmpi-only (ish) componenent -- namely a call to pkg-config. Likely a similar call is
#  available for mpich3, but I think impi does not typically provide pkg-config.
#--------------------------------------------------------------------------------------------------------
# Get proper compiler (intel), mpi environment:
module purge
module unuse /usr/local/modulefiles
module load intel/19 
module load openmpi_3/ 
module load netcdf/4.7.1
module load netcdf-fortran/4.5.2
#--------------------------------------------------------------------------------------------------------
# modules will add to an $INCLUDE variable, but we need to set that for the system...
export CPATH=${INCLUDE}:${CPATH}
CC_SPP=${CC}
#--------------------------------------------------------------------------------------------------------
# TODO: There is an issue with MIMA_CONFIG_LDFLAGS not calling python3-config (work around is running ifort separate)
export MIMA_CONFIG_FFLAGS="`nf-config --cflags` `pkg-config --cflags ompi-fort` -I${HDF5_INC} -I${HDF5_LIB} -I${NETCDF_FORTRAN_LIB} -I${NETCDF_LIB} "
export MIMA_CONFIG_CFLAGS="`nc-config --cflags` `pkg-config --cflags ompi` "
export MIMA_CONFIG_LDFLAGS=" -shared-intel `-config --ldflags --embed` `nf-config --flibs` `pkg-config --libs ompi-fort`python3-config --ldflags"
# Print MiMA Flags
echo "MIMA_CONFIG_FFLAGS: ${MIMA_CONFIG_FFLAGS}"
echo "MIMA_CONFIG_CFLAGS: ${MIMA_CONFIG_CFLAGS}"
echo "MIMA_CONFIG_LDFLAGS: ${MIMA_CONFIG_LDFLAGS}"
#--------------------------------------------------------------------------------------------------------
cwd=`pwd`
# Get number of processors. If running on SLURM, get the number of tasks.
if [[ -z ${SLURM_NTASKS} ]]; then
    MIMA_NPES=8
else
    MIMA_NPES=${SLURM_NTASKS}
fi

echo "Compile on N=${MIMA_NPES} process"
#--------------------------------------------------------------------------------------------------------
# Define variables
platform="SE3Mazama"
template="`pwd`/mkmf.template.$platform"              # path to template for your platform
mkmf="`cd ../bin;pwd`/mkmf"                           # path to executable mkmf
sourcedir="`cd ../src;pwd`"                           # path to directory containing model source code
mppnccombine="`cd ../bin;pwd`/mppnccombine.$platform" # path to executable mppnccombine
execdir="${cwd}/exec.$platform"                       # path to where code is compiled and executable is created
workdir="${cwd}/workdir"                              # path to where model is run and model output is produced
pathnames="${cwd}/path_names"                     # path to file containing list of subset of source paths
#--------------------------------------------------------------------------------------------------------
echo "Compile mppnccombine.SE3Mazama"
# compile mppnccombine.c, will be used only if $npes > 1
rm ${mppnccombine}
if [[ ! -f "${mppnccombine}" ]]; then
  # NOTE: this can be problematic if the SPP and MPI CC compilers get mixed up. this program often requires the spp compiler.
   ${CC_SPP} -O -o ${mppnccombine} -I${NETCDF_INC} -I${NETCDF_FORTRAN_INC} -I{HDF5_INC} -L${NETCDF_LIB} -L${NETCDF_FORTRAN_LIB} -L{HDF5_LIB}  -lnetcdf -lnetcdff ${cwd}/../postprocessing/mppnccombine.c
else
    echo "${mppnccombine} exists?"
fi
#--------------------------------------------------------------------------------------------------------
echo "Set up directory structure..."
# Create Execdir  
#if [[ -d ${execdir} ]]; then rm -rf ${execdir}; fi
if [[ ! -d "${execdir}" ]]; then 
    mkdir ${execdir}; 
    echo "- make execdir: ${execdir}"
fi
# Create Workdir
if [[ -e "${workdir}" ]]; then
  rm -rf ${workdir}
  mkdir ${workdir}
  echo "- make workdir: ${workdir}"
fi
#--------------------------------------------------------------------------------------------------------
echo "Create executable"
echo "SOURCE DIR: ${sourcedir}"
cd ${execdir}
cppDefs="-Duse_libMPI -Duse_netCDF -DgFortran"
# NOTE: not sure how much of this we still need for mkmf, but this does work...
${mkmf} -p mima.x -t $template -c "${cppDefs}" -a $sourcedir $pathnames ${NETCDF_INC} ${NETCDF_LIB} ${NETCDF_FORTRAN_INC} ${NETCDF_FORTRAN_LIB} ${HDF5_INC} ${HDF5_LIB} ${MPI_DIR}/include ${MPI_DIR}/lib $sourcedir/shared/mpp/include $sourcedir/shared/include
# /usr/local/include
#i#
#exit 1
#
make clean
#
#exit 1
echo "*** do live compile... (`pwd`)"
make -f Makefile -j${MIMA_NPES}
"""
